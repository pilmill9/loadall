%load all detection files in the current directory.
%include file template.xlsx to format the dates for the detections
function autoloaddetections()
load('c:\testloadall/ensembles/hydrophone_struct.mat'); 
load('c:\testloadall/ensembles/array_struct.mat'); 
cd ./detections; 
fnames = dir('*.mat');
numfids = length(fnames);
%load('c:\testloadall/ensembles/localize_struct.mat');
autoloadlocs(); 
%cd ./detections; 

%for i = 1:numfids
for j=1:numfids %load all detection days
    
  load( fnames(j).name );
 
   %for i=1:1 %length(hyd)
    for i=1:length(hyd) %load all detections for one hydrophone each iteration

        Start=([hyd(i).detection.calls.julian_start_time]);
        End =([hyd(i).detection.calls.julian_end_time]);

        tstart=datestr(Start, 'YYYY-mm-dd HH:MM:SS.FFF') ;
        tend=datestr(End, 'YYYY-mm-dd HH:MM:SS.FFF');

       % tstart=datestr(Start, 'mm-dd-YYYY HH:MM:SS.FFF') ;
       % tend=datestr(End, 'mm-dd-YYYY HH:MM:SS.FFF')

        lengthend=length(tend);
        count=[1:lengthend];
        count=transpose(count);
        count=int2str(count); %pm git 18
        %pm git 18: tt=table( count, tstart, tend, 'VariableNames', {'Count', 'Start', 'Stop'} );
        tt=table( count, tstart, tend, 'VariableNames', {'Event', 'Start', 'Stop'} );

        filename=sprintf('det%d%d.xlsx',j,i);

        command=sprintf('copy template.xlsx det%d%d.xlsx', j,i); %'copy template.xlsx  testtest.xlsx';
        dos(command);

        writetable(tt, filename, 'Sheet', 'Detections');

        a='PMiller';
        b='hyd';
        c='pmrf';
        d=int2str(i);
        %e='Hawaii';
        e=hydrophone_struct(i).name; %see github
        f=datestr(Start(1),'YYYY-mm-dd HH:MM:SS.FFF');%b1
        g=datestr(End(length(End )),'YYYY-mm-dd HH:MM:SS.FFF');%cend
        h='SIO.SWAL.Detections.AutomaticClicks.v1';
        ii='NOAA.NMFS.v1';
        jj='Generalized Power Law Detector';
        k='Triton';
        l='NA';
         u={a,b,c,d,e,f,g,h,ii,jj,k,l};
         uu=cell2table(u, 'VariableNames', {'User_ID', 'Abstract','Project','Deployment','Site','Effort_Start', 'Effort_End', 'Parser', 'SpeciesAbbreviation', 'Method', 'Software', 'Version'});;
         writetable(uu, filename, 'Sheet', 'MetaData');
         
         %enter parameters
         param=...  
        table( ...
        hyd(1).detection.parm.sample_freq, ...
        hyd(1).detection.parm.nrec, ...
        hyd(1).detection.parm.xp1, ...
        hyd(1).detection.parm.xp2, ...
        hyd(1).detection.parm.freq_lo, ...
        hyd(1).detection.parm.freq_hi, ...
        hyd(1).detection.parm.sum_freq_lo,...
        hyd(1).detection.parm.sum_freq_hi,...
        hyd(1).detection.parm.whiten,...
        hyd(1).detection.parm.white_x,...
        hyd(1).detection.parm.min_call,...
        hyd(1).detection.parm.max_call,...
        hyd(1).detection.parm.loop,...
        hyd(1).detection.parm.merge,...
        hyd(1).detection.parm.overlap,...
        hyd(1).detection.parm.nbin,...
        hyd(1).detection.parm.fftl,...
        hyd(1).detection.parm.skip,...
        hyd(1).detection.parm.bin_lo,...
        hyd(1).detection.parm.bin_hi,...
        hyd(1).detection.parm.nfreq,...
        hyd(1).detection.parm.sum_bin_lo,...
        hyd(1).detection.parm.sum_bin_hi,...
        hyd(1).detection.parm.noise_ceiling,...
        hyd(1).detection.parm.thresh,...
        hyd(1).detection.parm.template,...
        hyd(1).detection.parm.cut,...
        hyd(1).detection.parm.waveform,...
        hyd(1).detection.parm.cm_on,...
        hyd(1).detection.parm.cm_max_on,...
        hyd(1).detection.parm.cm_max2_on,...
        hyd(1).detection.parm.measurements,...
        hyd(1).detection.parm.slope,...
        hyd(1).detection.parm.filter,'VariableNames', {'sample_freq', 'nrec', 'xp1','xp2', 'freq_lo', 'freq_hi', 'sum_freq_lo', 'sum_freq_hi', 'whiten',...
            'white_x', 'min_call', 'max_call', 'loop', 'merge', 'overlap', 'nbin', 'fftl', 'skip', 'bin_lo', 'bin_hi',...
            'nfreq', 'sum_bin_lo', 'sum_bin_hi', 'noise_ceiling', 'thresh', 'template', 'cut', 'waveform', 'cm_on',...
            'cm_max_on', 'cm_max2_on', 'measurements', 'slope', 'filter'} );
    
         writetable(param, filename, 'Sheet', 'Parms'); 

         a='Unidentified Odontocete';
         b='UO';
         c='Clicks';

         u={a,b,c};
         %copy table to table1

         uu=cell2table(u, 'VariableNames',{'Common_Name', 'Species_Code', 'Call'});
         writetable(uu, filename, 'Sheet', 'Effort');
            %nb %s
         command=sprintf('import.py --file %s --sourcemap SIO.detdex26 --overwrite TRUE Detections', filename); %throws metadata sheet not found tho dbsubmit correct. 

         system(command);

    end %loop one hydrophone
%call load locs to use the hydrophone data
autoloadlocs(); 
end %load detection day
cd ..;
return; 
